{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\",\n  _s = $RefreshSig$();\n// // Kanban.js\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [columnsData, setColumnsData] = useState({\n//     open: [\n//       {\n//         id: \"task-1\",\n//         title: \"Task 1\",\n//         description: \"Description for Task 1\",\n//         assignedTo: \"User A\",\n//       },\n//       // ... other tasks\n//     ],\n//     ongoing: [\n//       {\n//         id: \"task-2\",\n//         title: \"Task 2\",\n//         description: \"Description for Task 2\",\n//         assignedTo: \"User B\",\n//       },\n//       // ... other tasks\n//     ],\n//     close: [\n//       {\n//         id: \"task-3\",\n//         title: \"Task 3\",\n//         description: \"Description for Task 3\",\n//         assignedTo: \"User C\",\n//       },\n//       // ... other tasks\n//     ],\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     // If there's no destination or the task was dropped back into its original position, do nothing\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     // Get the task list for the source and destination columns\n//     const sourceTasks = [...columnsData[source.droppableId]];\n//     const destinationTasks = [...columnsData[destination.droppableId]];\n\n//     // Find the task being dragged\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\n\n//     if (!draggedTask) {\n//       console.error(`Task with id ${draggableId} not found in source column.`);\n//       return;\n//     }\n\n//     // If the destination column is different from the source column\n//     if (destination.droppableId !== source.droppableId) {\n//       // Remove the task from the source column\n//       sourceTasks.splice(source.index, 1);\n\n//       // Insert the task into the destination column at the specified index\n//       destinationTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//         [destination.droppableId]: destinationTasks,\n//       });\n//     } else {\n//       // If the destination column is the same as the source column, reordering within the same column\n//       sourceTasks.splice(source.index, 1);\n//       sourceTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order within the same column\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//       });\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// // Kanban.js\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   return (\n//     <div className=\"kanban\">\n//       <KanbanColumn />\n//       <KanbanColumn />\n//       <KanbanColumn />\n//     </div>\n//   );\n// };\n\n// export default Kanban;\n\n// Kanban.js\nimport React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = () => {\n  _s();\n  const initialTasks = {\n    task1: {\n      id: \"task1\",\n      content: \"Task 1\"\n    },\n    task2: {\n      id: \"task2\",\n      content: \"Task 2\"\n    },\n    task3: {\n      id: \"task3\",\n      content: \"Task 3\"\n    }\n  };\n  const initialColumns = {\n    column1: {\n      id: \"column1\",\n      title: \"Column 1\",\n      taskIds: [\"task1\", \"task2\", \"task3\"]\n    },\n    column2: {\n      id: \"column2\",\n      title: \"Column 2\",\n      taskIds: [] // Make sure the task IDs match the IDs in initialTasks\n    }\n    // Add more columns as needed\n    // column3: {\n    //   id: \"column3\",\n    //   title: \"Column 3\",\n    //   taskIds: [],\n    // },\n  };\n\n  const [tasks, setTasks] = React.useState(initialTasks);\n  const [columns, setColumns] = React.useState(initialColumns);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    const column = columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds\n    };\n    setColumns({\n      ...columns,\n      [newColumn.id]: newColumn\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban\",\n      children: Object.values(columns).map(column => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        column: column,\n        tasks: tasks\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(Kanban, \"h4rt4EchrX36Slv07Q9KZLiepls=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","DragDropContext","KanbanColumn","jsxDEV","_jsxDEV","Kanban","_s","initialTasks","task1","id","content","task2","task3","initialColumns","column1","title","taskIds","column2","tasks","setTasks","useState","columns","setColumns","onDragEnd","result","destination","source","draggableId","droppableId","index","column","newTaskIds","Array","from","splice","newColumn","children","className","Object","values","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// // Kanban.js\r\n// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [columnsData, setColumnsData] = useState({\r\n//     open: [\r\n//       {\r\n//         id: \"task-1\",\r\n//         title: \"Task 1\",\r\n//         description: \"Description for Task 1\",\r\n//         assignedTo: \"User A\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     ongoing: [\r\n//       {\r\n//         id: \"task-2\",\r\n//         title: \"Task 2\",\r\n//         description: \"Description for Task 2\",\r\n//         assignedTo: \"User B\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     close: [\r\n//       {\r\n//         id: \"task-3\",\r\n//         title: \"Task 3\",\r\n//         description: \"Description for Task 3\",\r\n//         assignedTo: \"User C\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     // If there's no destination or the task was dropped back into its original position, do nothing\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     // Get the task list for the source and destination columns\r\n//     const sourceTasks = [...columnsData[source.droppableId]];\r\n//     const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n//     // Find the task being dragged\r\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n//     if (!draggedTask) {\r\n//       console.error(`Task with id ${draggableId} not found in source column.`);\r\n//       return;\r\n//     }\r\n\r\n//     // If the destination column is different from the source column\r\n//     if (destination.droppableId !== source.droppableId) {\r\n//       // Remove the task from the source column\r\n//       sourceTasks.splice(source.index, 1);\r\n\r\n//       // Insert the task into the destination column at the specified index\r\n//       destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//         [destination.droppableId]: destinationTasks,\r\n//       });\r\n//     } else {\r\n//       // If the destination column is the same as the source column, reordering within the same column\r\n//       sourceTasks.splice(source.index, 1);\r\n//       sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order within the same column\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// // Kanban.js\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   return (\r\n//     <div className=\"kanban\">\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// Kanban.js\r\nimport React from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\nconst Kanban = () => {\r\n  const initialTasks = {\r\n    task1: { id: \"task1\", content: \"Task 1\" },\r\n    task2: { id: \"task2\", content: \"Task 2\" },\r\n    task3: { id: \"task3\", content: \"Task 3\" },\r\n  };\r\n\r\n  const initialColumns = {\r\n    column1: {\r\n      id: \"column1\",\r\n      title: \"Column 1\",\r\n      taskIds: [\"task1\", \"task2\", \"task3\"],\r\n    },\r\n    column2: {\r\n      id: \"column2\",\r\n      title: \"Column 2\",\r\n      taskIds: [], // Make sure the task IDs match the IDs in initialTasks\r\n    },\r\n    // Add more columns as needed\r\n    // column3: {\r\n    //   id: \"column3\",\r\n    //   title: \"Column 3\",\r\n    //   taskIds: [],\r\n    // },\r\n  };\r\n  const [tasks, setTasks] = React.useState(initialTasks);\r\n  const [columns, setColumns] = React.useState(initialColumns);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const column = columns[source.droppableId];\r\n    const newTaskIds = Array.from(column.taskIds);\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newColumn = {\r\n      ...column,\r\n      taskIds: newTaskIds,\r\n    };\r\n\r\n    setColumns({\r\n      ...columns,\r\n      [newColumn.id]: newColumn,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"kanban\">\r\n        {Object.values(columns).map((column) => (\r\n          <KanbanColumn key={column.id} column={column} tasks={tasks} />\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAO,6BAA6B;AACpC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,YAAY,GAAG;IACnBC,KAAK,EAAE;MAAEC,EAAE,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAS,CAAC;IACzCC,KAAK,EAAE;MAAEF,EAAE,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAS,CAAC;IACzCE,KAAK,EAAE;MAAEH,EAAE,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAS;EAC1C,CAAC;EAED,MAAMG,cAAc,GAAG;IACrBC,OAAO,EAAE;MACPL,EAAE,EAAE,SAAS;MACbM,KAAK,EAAE,UAAU;MACjBC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;IACrC,CAAC;IACDC,OAAO,EAAE;MACPR,EAAE,EAAE,SAAS;MACbM,KAAK,EAAE,UAAU;MACjBC,OAAO,EAAE,EAAE,CAAE;IACf;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;;EACD,MAAM,CAACE,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,KAAK,CAACoB,QAAQ,CAACb,YAAY,CAAC;EACtD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGtB,KAAK,CAACoB,QAAQ,CAACP,cAAc,CAAC;EAE5D,MAAMU,SAAS,GAAIC,MAAM,IAAK;IAC5B,MAAM;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAY,CAAC,GAAGH,MAAM;IAEnD,IAAI,CAACC,WAAW,EAAE;MAChB;IACF;IAEA,IACEA,WAAW,CAACG,WAAW,KAAKF,MAAM,CAACE,WAAW,IAC9CH,WAAW,CAACI,KAAK,KAAKH,MAAM,CAACG,KAAK,EAClC;MACA;IACF;IAEA,MAAMC,MAAM,GAAGT,OAAO,CAACK,MAAM,CAACE,WAAW,CAAC;IAC1C,MAAMG,UAAU,GAAGC,KAAK,CAACC,IAAI,CAACH,MAAM,CAACd,OAAO,CAAC;IAC7Ce,UAAU,CAACG,MAAM,CAACR,MAAM,CAACG,KAAK,EAAE,CAAC,CAAC;IAClCE,UAAU,CAACG,MAAM,CAACT,WAAW,CAACI,KAAK,EAAE,CAAC,EAAEF,WAAW,CAAC;IAEpD,MAAMQ,SAAS,GAAG;MAChB,GAAGL,MAAM;MACTd,OAAO,EAAEe;IACX,CAAC;IAEDT,UAAU,CAAC;MACT,GAAGD,OAAO;MACV,CAACc,SAAS,CAAC1B,EAAE,GAAG0B;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,oBACE/B,OAAA,CAACH,eAAe;IAACsB,SAAS,EAAEA,SAAU;IAAAa,QAAA,eACpChC,OAAA;MAAKiC,SAAS,EAAC,QAAQ;MAAAD,QAAA,EACpBE,MAAM,CAACC,MAAM,CAAClB,OAAO,CAAC,CAACmB,GAAG,CAAEV,MAAM,iBACjC1B,OAAA,CAACF,YAAY;QAAiB4B,MAAM,EAAEA,MAAO;QAACZ,KAAK,EAAEA;MAAM,GAAxCY,MAAM,CAACrB,EAAE;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiC,CAC9D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAEtB,CAAC;AAACtC,EAAA,CAnEID,MAAM;AAAAwC,EAAA,GAANxC,MAAM;AAqEZ,eAAeA,MAAM;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}