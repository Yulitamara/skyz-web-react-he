{"ast":null,"code":"// // Kanban.js\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [columnsData, setColumnsData] = useState({\n//     open: [\n//       {\n//         id: \"task-1\",\n//         title: \"Task 1\",\n//         description: \"Description for Task 1\",\n//         assignedTo: \"User A\",\n//       },\n//       // ... other tasks\n//     ],\n//     ongoing: [\n//       {\n//         id: \"task-2\",\n//         title: \"Task 2\",\n//         description: \"Description for Task 2\",\n//         assignedTo: \"User B\",\n//       },\n//       // ... other tasks\n//     ],\n//     close: [\n//       {\n//         id: \"task-3\",\n//         title: \"Task 3\",\n//         description: \"Description for Task 3\",\n//         assignedTo: \"User C\",\n//       },\n//       // ... other tasks\n//     ],\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     // If there's no destination or the task was dropped back into its original position, do nothing\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     // Get the task list for the source and destination columns\n//     const sourceTasks = [...columnsData[source.droppableId]];\n//     const destinationTasks = [...columnsData[destination.droppableId]];\n\n//     // Find the task being dragged\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\n\n//     if (!draggedTask) {\n//       console.error(`Task with id ${draggableId} not found in source column.`);\n//       return;\n//     }\n\n//     // If the destination column is different from the source column\n//     if (destination.droppableId !== source.droppableId) {\n//       // Remove the task from the source column\n//       sourceTasks.splice(source.index, 1);\n\n//       // Insert the task into the destination column at the specified index\n//       destinationTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//         [destination.droppableId]: destinationTasks,\n//       });\n//     } else {\n//       // If the destination column is the same as the source column, reordering within the same column\n//       sourceTasks.splice(source.index, 1);\n//       sourceTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order within the same column\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//       });\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// // Kanban.js\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   return (\n//     <div className=\"kanban\">\n//       <KanbanColumn />\n//       <KanbanColumn />\n//       <KanbanColumn />\n//     </div>\n//   );\n// };\n\n// export default Kanban;","map":{"version":3,"names":[],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// // Kanban.js\r\n// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [columnsData, setColumnsData] = useState({\r\n//     open: [\r\n//       {\r\n//         id: \"task-1\",\r\n//         title: \"Task 1\",\r\n//         description: \"Description for Task 1\",\r\n//         assignedTo: \"User A\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     ongoing: [\r\n//       {\r\n//         id: \"task-2\",\r\n//         title: \"Task 2\",\r\n//         description: \"Description for Task 2\",\r\n//         assignedTo: \"User B\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     close: [\r\n//       {\r\n//         id: \"task-3\",\r\n//         title: \"Task 3\",\r\n//         description: \"Description for Task 3\",\r\n//         assignedTo: \"User C\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     // If there's no destination or the task was dropped back into its original position, do nothing\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     // Get the task list for the source and destination columns\r\n//     const sourceTasks = [...columnsData[source.droppableId]];\r\n//     const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n//     // Find the task being dragged\r\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n//     if (!draggedTask) {\r\n//       console.error(`Task with id ${draggableId} not found in source column.`);\r\n//       return;\r\n//     }\r\n\r\n//     // If the destination column is different from the source column\r\n//     if (destination.droppableId !== source.droppableId) {\r\n//       // Remove the task from the source column\r\n//       sourceTasks.splice(source.index, 1);\r\n\r\n//       // Insert the task into the destination column at the specified index\r\n//       destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//         [destination.droppableId]: destinationTasks,\r\n//       });\r\n//     } else {\r\n//       // If the destination column is the same as the source column, reordering within the same column\r\n//       sourceTasks.splice(source.index, 1);\r\n//       sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order within the same column\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// // Kanban.js\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   return (\r\n//     <div className=\"kanban\">\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}