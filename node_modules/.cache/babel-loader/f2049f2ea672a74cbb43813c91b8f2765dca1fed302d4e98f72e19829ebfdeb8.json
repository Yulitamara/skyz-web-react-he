{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\",\n  _s = $RefreshSig$();\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [columnsData, setColumnsData] = useState({\n//     open: [\n//       {\n//         id: \"task-1\",\n//         title: \"Task 1\",\n//         description: \"Description for Task 1\",\n//         assignedTo: \"User A\",\n//       },\n//       // ... other tasks\n//     ],\n//     ongoing: [\n//       {\n//         id: \"task-2\",\n//         title: \"Task 2\",\n//         description: \"Description for Task 2\",\n//         assignedTo: \"User B\",\n//       },\n//       // ... other tasks\n//     ],\n//     close: [\n//       {\n//         id: \"task-3\",\n//         title: \"Task 3\",\n//         description: \"Description for Task 3\",\n//         assignedTo: \"User C\",\n//       },\n//       // ... other tasks\n//     ],\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     // If there's no destination or the task was dropped back into its original position, do nothing\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     // Get the task list for the source and destination columns\n//     const sourceTasks = [...columnsData[source.droppableId]];\n//     const destinationTasks = [...columnsData[destination.droppableId]];\n\n//     // Find the task being dragged\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\n\n//     if (!draggedTask) {\n//       console.error(`Task with id ${draggableId} not found in source column.`);\n//       return;\n//     }\n\n//     // Remove the task from the source column\n//     sourceTasks.splice(source.index, 1);\n\n//     // Insert the task into the destination column at the specified index\n//     destinationTasks.splice(destination.index, 0, draggedTask);\n\n//     // Update the state with the new task order\n//     setColumnsData({\n//       ...columnsData,\n//       [source.droppableId]: sourceTasks,\n//       [destination.droppableId]: destinationTasks,\n//     });\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// Kanban.js\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = () => {\n  _s();\n  const [columnsData, setColumnsData] = useState({\n    open: [{\n      id: \"task-1\",\n      title: \"Task 1\",\n      description: \"Description for Task 1\",\n      assignedTo: \"User A\"\n    }\n    // ... other tasks\n    ],\n\n    ongoing: [{\n      id: \"task-2\",\n      title: \"Task 2\",\n      description: \"Description for Task 2\",\n      assignedTo: \"User B\"\n    }\n    // ... other tasks\n    ],\n\n    close: [{\n      id: \"task-3\",\n      title: \"Task 3\",\n      description: \"Description for Task 3\",\n      assignedTo: \"User C\"\n    }\n    // ... other tasks\n    ]\n  });\n\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // If there's no destination or the task was dropped back into its original position, do nothing\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Get the task list for the source and destination columns\n    const sourceTasks = [...columnsData[source.droppableId]];\n    const destinationTasks = [...columnsData[destination.droppableId]];\n\n    // Find the task being dragged\n    const draggedTask = sourceTasks.find(task => task.id === draggableId);\n    if (!draggedTask) {\n      console.error(`Task with id ${draggableId} not found in source column.`);\n      return;\n    }\n\n    // If the destination column is different from the source column\n    if (destination.droppableId !== source.droppableId) {\n      // Remove the task from the source column\n      sourceTasks.splice(source.index, 1);\n\n      // Insert the task into the destination column at the specified index\n      destinationTasks.splice(destination.index, 0, draggedTask);\n\n      // Update the state with the new task order\n      setColumnsData({\n        ...columnsData,\n        [source.droppableId]: sourceTasks,\n        [destination.droppableId]: destinationTasks\n      });\n    } else {\n      // If the destination column is the same as the source column, reordering within the same column\n      sourceTasks.splice(source.index, 1);\n      sourceTasks.splice(destination.index, 0, draggedTask);\n\n      // Update the state with the new task order within the same column\n      setColumnsData({\n        ...columnsData,\n        [source.droppableId]: sourceTasks\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban\",\n      children: [/*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"open\",\n        tasks: columnsData.open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"ongoing\",\n        tasks: columnsData.ongoing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"close\",\n        tasks: columnsData.close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(Kanban, \"zEAoiEHopSVpbcUI1z8qMw5MbfU=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","KanbanColumn","jsxDEV","_jsxDEV","Kanban","_s","columnsData","setColumnsData","open","id","title","description","assignedTo","ongoing","close","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceTasks","destinationTasks","draggedTask","find","task","console","error","splice","children","className","tasks","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [columnsData, setColumnsData] = useState({\r\n//     open: [\r\n//       {\r\n//         id: \"task-1\",\r\n//         title: \"Task 1\",\r\n//         description: \"Description for Task 1\",\r\n//         assignedTo: \"User A\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     ongoing: [\r\n//       {\r\n//         id: \"task-2\",\r\n//         title: \"Task 2\",\r\n//         description: \"Description for Task 2\",\r\n//         assignedTo: \"User B\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     close: [\r\n//       {\r\n//         id: \"task-3\",\r\n//         title: \"Task 3\",\r\n//         description: \"Description for Task 3\",\r\n//         assignedTo: \"User C\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     // If there's no destination or the task was dropped back into its original position, do nothing\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     // Get the task list for the source and destination columns\r\n//     const sourceTasks = [...columnsData[source.droppableId]];\r\n//     const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n//     // Find the task being dragged\r\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n//     if (!draggedTask) {\r\n//       console.error(`Task with id ${draggableId} not found in source column.`);\r\n//       return;\r\n//     }\r\n\r\n//     // Remove the task from the source column\r\n//     sourceTasks.splice(source.index, 1);\r\n\r\n//     // Insert the task into the destination column at the specified index\r\n//     destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//     // Update the state with the new task order\r\n//     setColumnsData({\r\n//       ...columnsData,\r\n//       [source.droppableId]: sourceTasks,\r\n//       [destination.droppableId]: destinationTasks,\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// Kanban.js\r\nimport React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\nconst Kanban = () => {\r\n  const [columnsData, setColumnsData] = useState({\r\n    open: [\r\n      {\r\n        id: \"task-1\",\r\n        title: \"Task 1\",\r\n        description: \"Description for Task 1\",\r\n        assignedTo: \"User A\",\r\n      },\r\n      // ... other tasks\r\n    ],\r\n    ongoing: [\r\n      {\r\n        id: \"task-2\",\r\n        title: \"Task 2\",\r\n        description: \"Description for Task 2\",\r\n        assignedTo: \"User B\",\r\n      },\r\n      // ... other tasks\r\n    ],\r\n    close: [\r\n      {\r\n        id: \"task-3\",\r\n        title: \"Task 3\",\r\n        description: \"Description for Task 3\",\r\n        assignedTo: \"User C\",\r\n      },\r\n      // ... other tasks\r\n    ],\r\n  });\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    // If there's no destination or the task was dropped back into its original position, do nothing\r\n    if (\r\n      !destination ||\r\n      (destination.droppableId === source.droppableId &&\r\n        destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Get the task list for the source and destination columns\r\n    const sourceTasks = [...columnsData[source.droppableId]];\r\n    const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n    // Find the task being dragged\r\n    const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n    if (!draggedTask) {\r\n      console.error(`Task with id ${draggableId} not found in source column.`);\r\n      return;\r\n    }\r\n\r\n    // If the destination column is different from the source column\r\n    if (destination.droppableId !== source.droppableId) {\r\n      // Remove the task from the source column\r\n      sourceTasks.splice(source.index, 1);\r\n\r\n      // Insert the task into the destination column at the specified index\r\n      destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n      // Update the state with the new task order\r\n      setColumnsData({\r\n        ...columnsData,\r\n        [source.droppableId]: sourceTasks,\r\n        [destination.droppableId]: destinationTasks,\r\n      });\r\n    } else {\r\n      // If the destination column is the same as the source column, reordering within the same column\r\n      sourceTasks.splice(source.index, 1);\r\n      sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n      // Update the state with the new task order within the same column\r\n      setColumnsData({\r\n        ...columnsData,\r\n        [source.droppableId]: sourceTasks,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"kanban\">\r\n        <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n        <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n        <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}