{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\KanbanColumn.js\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanTask from \"./KanbanTask\";\n\n// const KanbanColumn = ({ columnId, tasks, subtitle, titleClassName }) => {\n//   const column = tasks.columns[columnId];\n\n//   if (!column) {\n//     return null; // Handle the case where the column is not found\n//   }\n\n//   return (\n//     <div>\n//       <div className={`title ${titleClassName}`}>\n//         <h2>{column.title}</h2>\n//         <span className=\"material-symbols-outlined\">close</span>\n//       </div>\n//       <Droppable droppableId={columnId} type=\"TASK\">\n//         {(provided) => (\n//           <div\n//             ref={provided.innerRef}\n//             {...provided.droppableProps}\n//             className=\"kanban-column\"\n//           >\n//             <h3>{subtitle}</h3>\n//             <div className=\"kanban-tasks-list\">\n//               {column.taskIds.map((taskId, index) => (\n//                 <KanbanTask\n//                   key={taskId}\n//                   taskId={taskId}\n//                   task={tasks.tasks[taskId]}\n//                   index={index}\n//                 />\n//               ))}\n//             </div>\n//             {provided.placeholder}\n//           </div>\n//         )}\n//       </Droppable>\n//     </div>\n//   );\n// };\n\n// export default KanbanColumn;\n\n// ... (imports)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KanbanColumn = _ref => {\n  let {\n    columnId,\n    tasks,\n    subtitle,\n    titleClassName\n  } = _ref;\n  const column = tasks.columns[columnId];\n  if (!column || !column.taskIds) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `title ${titleClassName}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: column.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-container\",\n      children: [1, 2, 3].map(listIndex => /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: `${columnId}-list-${listIndex}`,\n        type: \"TASK\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          className: \"kanban-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: subtitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"kanban-tasks-list\",\n            children: column.taskIds.filter(taskId => taskId.endsWith(`list-${listIndex}`)).map((taskId, index) => /*#__PURE__*/_jsxDEV(KanbanTask, {\n              taskId: taskId,\n              task: tasks.tasks[taskId],\n              index: index\n            }, taskId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this)\n      }, listIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = KanbanColumn;\nexport default KanbanColumn;\nvar _c;\n$RefreshReg$(_c, \"KanbanColumn\");","map":{"version":3,"names":["Droppable","KanbanTask","jsxDEV","_jsxDEV","KanbanColumn","_ref","columnId","tasks","subtitle","titleClassName","column","columns","taskIds","children","className","title","fileName","_jsxFileName","lineNumber","columnNumber","map","listIndex","droppableId","type","provided","ref","innerRef","droppableProps","filter","taskId","endsWith","index","task","placeholder","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/KanbanColumn.js"],"sourcesContent":["import { Droppable } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanTask from \"./KanbanTask\";\r\n\r\n// const KanbanColumn = ({ columnId, tasks, subtitle, titleClassName }) => {\r\n//   const column = tasks.columns[columnId];\r\n\r\n//   if (!column) {\r\n//     return null; // Handle the case where the column is not found\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className={`title ${titleClassName}`}>\r\n//         <h2>{column.title}</h2>\r\n//         <span className=\"material-symbols-outlined\">close</span>\r\n//       </div>\r\n//       <Droppable droppableId={columnId} type=\"TASK\">\r\n//         {(provided) => (\r\n//           <div\r\n//             ref={provided.innerRef}\r\n//             {...provided.droppableProps}\r\n//             className=\"kanban-column\"\r\n//           >\r\n//             <h3>{subtitle}</h3>\r\n//             <div className=\"kanban-tasks-list\">\r\n//               {column.taskIds.map((taskId, index) => (\r\n//                 <KanbanTask\r\n//                   key={taskId}\r\n//                   taskId={taskId}\r\n//                   task={tasks.tasks[taskId]}\r\n//                   index={index}\r\n//                 />\r\n//               ))}\r\n//             </div>\r\n//             {provided.placeholder}\r\n//           </div>\r\n//         )}\r\n//       </Droppable>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default KanbanColumn;\r\n\r\n// ... (imports)\r\n\r\nconst KanbanColumn = ({ columnId, tasks, subtitle, titleClassName }) => {\r\n  const column = tasks.columns[columnId];\r\n\r\n  if (!column || !column.taskIds) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={`title ${titleClassName}`}>\r\n        <h2>{column.title}</h2>\r\n        <span className=\"material-symbols-outlined\">close</span>\r\n      </div>\r\n      <div className=\"kanban-container\">\r\n        {[1, 2, 3].map((listIndex) => (\r\n          <Droppable key={listIndex} droppableId={`${columnId}-list-${listIndex}`} type=\"TASK\">\r\n            {(provided) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                className=\"kanban-column\"\r\n              >\r\n                <h3>{subtitle}</h3>\r\n                <div className=\"kanban-tasks-list\">\r\n                  {column.taskIds\r\n                    .filter((taskId) => taskId.endsWith(`list-${listIndex}`))\r\n                    .map((taskId, index) => (\r\n                      <KanbanTask\r\n                        key={taskId}\r\n                        taskId={taskId}\r\n                        task={tasks.tasks[taskId]}\r\n                        index={index}\r\n                      />\r\n                    ))}\r\n                </div>\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanColumn;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}