{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport * as events from './constant';\n/**\n * Kanban data module\n */\nvar Data = /** @class */function () {\n  /**\n   * Constructor for data module\n   *\n   * @param {Kanban} parent Accepts the instance of the Kanban\n   */\n  function Data(parent) {\n    this.dataState = {\n      isPending: false,\n      resolver: null,\n      isDataChanged: false\n    };\n    this.parent = parent;\n    this.keyField = this.parent.cardSettings.headerField;\n    this.dataState = {\n      isDataChanged: false\n    };\n    this.isObservable = false;\n    this.initDataManager(parent.dataSource, parent.query);\n    this.refreshDataManager();\n  }\n  /**\n   * The function used to initialize dataManager` and query\n   *\n   * @param {Object[] | DataManager} dataSource Accepts the dataSource as collection of objects or Datamanager instance.\n   * @param {Query} query Accepts the query to process the data from collections.\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.initDataManager = function (dataSource, query) {\n    this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n    this.query = query instanceof Query ? query : new Query();\n    this.kanbanData = new DataManager(this.parent.kanbanData);\n  };\n  /**\n   * The function used to generate updated Query from schedule model\n   *\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.getQuery = function () {\n    return this.query.clone();\n  };\n  /**\n   * The function used to get dataSource by executing given Query\n   *\n   * @param  {Query} query - A Query that specifies to generate dataSource\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.getData = function (query) {\n    if (this.parent.dataSource && 'result' in this.parent.dataSource) {\n      var def = this.eventPromise({\n        requestType: ''\n      }, query);\n      this.isObservable = true;\n      return def.promise;\n    }\n    return this.dataManager.executeQuery(query);\n  };\n  Data.prototype.setState = function (state) {\n    return this.dataState = state;\n  };\n  Data.prototype.getStateEventArgument = function (query) {\n    var adaptr = new UrlAdaptor();\n    var dm = new DataManager({\n      url: '',\n      adaptor: new UrlAdaptor()\n    });\n    var state = adaptr.processQuery(dm, query);\n    var data = JSON.parse(state.data);\n    return extend(data, state.pvtData);\n  };\n  Data.prototype.eventPromise = function (args, query, index) {\n    var _this = this;\n    var dataArgs = args;\n    var state = this.getStateEventArgument(query);\n    var def = new Deferred();\n    var deff = new Deferred();\n    if (args.requestType !== undefined && this.dataState.isDataChanged !== false) {\n      state.action = args;\n      if (args.requestType === 'cardChanged' || args.requestType === 'cardRemoved' || args.requestType === 'cardCreated') {\n        var editArgs_1 = args;\n        editArgs_1.promise = deff.promise;\n        editArgs_1.state = state;\n        editArgs_1.index = index;\n        this.setState({\n          isPending: true,\n          resolver: deff.resolve\n        });\n        dataArgs.endEdit = deff.resolve;\n        dataArgs.cancelEdit = deff.reject;\n        this.parent.trigger(events.dataSourceChanged, editArgs_1);\n        deff.promise.then(function () {\n          _this.setState({\n            isPending: true,\n            resolver: def.resolve\n          });\n          _this.parent.trigger(events.dataStateChange, state);\n          editArgs_1.addedRecords.forEach(function (data) {\n            _this.parent.kanbanData.push(data);\n          });\n          editArgs_1.changedRecords.forEach(function (changedRecord) {\n            var cardObj = _this.parent.kanbanData.filter(function (data) {\n              return data[_this.parent.cardSettings.headerField] === changedRecord[_this.parent.cardSettings.headerField];\n            })[0];\n            extend(cardObj, changedRecord);\n          });\n          editArgs_1.deletedRecords.forEach(function (deletedRecord) {\n            var index = _this.parent.kanbanData.findIndex(function (data) {\n              return data[_this.parent.cardSettings.headerField] === deletedRecord[_this.parent.cardSettings.headerField];\n            });\n            _this.parent.kanbanData.splice(index, 1);\n          });\n        }).catch(function () {\n          _this.parent.hideSpinner();\n          void 0;\n        });\n      } else {\n        this.setState({\n          isPending: true,\n          resolver: def.resolve\n        });\n        this.parent.trigger(events.dataStateChange, state);\n      }\n    } else {\n      this.setState({});\n      def.resolve(this.parent.dataSource);\n    }\n    return def;\n  };\n  /**\n   * The function used to get the table name from the given Query\n   *\n   * @returns {string} Returns the table name.\n   * @private\n   */\n  Data.prototype.getTable = function () {\n    if (this.parent.query) {\n      var query = this.getQuery();\n      return query.fromTable;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * The function is used to send the request and get response from datamanager\n   *\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.refreshDataManager = function () {\n    var _this = this;\n    var dataManager = this.getData(this.getQuery());\n    dataManager.then(function (e) {\n      return _this.dataManagerSuccess(e);\n    }).catch(function (e) {\n      return _this.dataManagerFailure(e);\n    });\n  };\n  /**\n   * The function is used to handle the success response from dataManager\n   *\n   * @param {ReturnType} e Accepts the dataManager success result\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.dataManagerSuccess = function (e, type, offlineArgs, index) {\n    var _this = this;\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    if (type) {\n      var resultData = extend([], e.result, null, true);\n      this.parent.kanbanData = resultData;\n      if (offlineArgs.requestType === 'cardCreated') {\n        if (!Array.isArray(e)) {\n          offlineArgs.addedRecords[0] = extend(offlineArgs.addedRecords[0], e);\n        } else {\n          this.modifyArrayData(offlineArgs.addedRecords, e);\n        }\n      } else if (offlineArgs.requestType === 'cardChanged') {\n        if (!Array.isArray(e)) {\n          offlineArgs.changedRecords[0] = extend(offlineArgs.changedRecords[0], e);\n        } else {\n          this.modifyArrayData(offlineArgs.changedRecords, e);\n        }\n      } else if (offlineArgs.requestType === 'cardRemoved') {\n        if (!Array.isArray(e)) {\n          offlineArgs.deletedRecords[0] = extend(offlineArgs.deletedRecords[0], e);\n        } else {\n          this.modifyArrayData(offlineArgs.deletedRecords, e);\n        }\n      }\n      this.refreshUI(offlineArgs, index);\n    } else {\n      this.parent.trigger(events.dataBinding, e, function (args) {\n        var resultData = extend([], args.result, null, true);\n        _this.parent.kanbanData = resultData;\n        _this.parent.notify(events.dataReady, {\n          processedData: resultData\n        });\n        _this.parent.trigger(events.dataBound, null, function () {\n          return _this.parent.hideSpinner();\n        });\n      });\n    }\n  };\n  /**\n   * The function is used to handle the failure response from dataManager\n   *\n   * @param {ReturnType} e Accepts the dataManager failure result\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.dataManagerFailure = function (e) {\n    var _this = this;\n    if (this.parent.isDestroyed) {\n      return;\n    }\n    this.parent.trigger(events.actionFailure, {\n      error: e\n    }, function () {\n      return _this.parent.hideSpinner();\n    });\n  };\n  /**\n   * The function is used to perform the insert, update, delete and batch actions in datamanager\n   *\n   * @param {string} updateType Accepts the update type action\n   * @param {SaveChanges} params Accepts the savechanges params\n   * @param {string} type Accepts the requestType as string\n   * @param {Object} data Accepts the data to perform crud action\n   * @param {number} index Accepts the index to refresh the data into UI\n   * @returns {void}\n   * @private\n   */\n  Data.prototype.updateDataManager = function (updateType, params, type, data, index) {\n    var _this = this;\n    this.parent.showSpinner();\n    var promise;\n    var actionArgs = {\n      requestType: type,\n      cancel: false,\n      addedRecords: params.addedRecords,\n      changedRecords: params.changedRecords,\n      deletedRecords: params.deletedRecords\n    };\n    this.eventPromise(actionArgs, this.query, index);\n    this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n      if (!offlineArgs.cancel) {\n        switch (updateType) {\n          case 'insert':\n            promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery());\n            break;\n          case 'update':\n            promise = _this.dataManager.update(_this.keyField, data, _this.getTable(), _this.getQuery());\n            break;\n          case 'delete':\n            promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());\n            break;\n          case 'batch':\n            promise = _this.dataManager.saveChanges(params, _this.keyField, _this.getTable(), _this.getQuery());\n            break;\n        }\n        if (_this.dataManager.dataSource.offline) {\n          if (!_this.isObservable) {\n            _this.kanbanData = _this.dataManager;\n            _this.parent.kanbanData = _this.dataManager.dataSource.json;\n            _this.refreshUI(offlineArgs, index);\n          }\n        } else {\n          promise.then(function () {\n            if (_this.parent.isDestroyed) {\n              return;\n            }\n            var dataManager = _this.getData(_this.getQuery());\n            dataManager.then(function (e) {\n              return _this.dataManagerSuccess(e, 'DataSourceChange', offlineArgs, index);\n            }).catch(function (e) {\n              return _this.dataManagerFailure(e);\n            });\n          }).catch(function (e) {\n            _this.dataManagerFailure(e);\n          });\n        }\n      }\n    });\n  };\n  Data.prototype.modifyArrayData = function (onLineData, e) {\n    if (onLineData.length === e.length) {\n      for (var i = 0; i < e.length; i++) {\n        onLineData[i] = extend(onLineData[i], e[i]);\n      }\n    }\n    return onLineData;\n  };\n  /**\n   * The function is used to refresh the UI once the data manager action is completed\n   *\n   * @param {ActionEventArgs} args Accepts the ActionEventArgs to refresh UI.\n   * @param {number} position Accepts the index to refresh UI.\n   * @returns {void}\n   */\n  Data.prototype.refreshUI = function (args, position) {\n    var _this = this;\n    this.parent.layoutModule.columnData = this.parent.layoutModule.getColumnCards();\n    if (this.parent.swimlaneSettings.keyField) {\n      this.parent.layoutModule.kanbanRows = this.parent.layoutModule.getRows();\n      this.parent.layoutModule.swimlaneData = this.parent.layoutModule.getSwimlaneCards();\n    }\n    args.addedRecords.forEach(function (data, index) {\n      if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n        data[_this.parent.swimlaneSettings.keyField] = '';\n      }\n      _this.parent.layoutModule.renderCardBasedOnIndex(data, position + index);\n    });\n    args.changedRecords.forEach(function (data) {\n      if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n        data[_this.parent.swimlaneSettings.keyField] = '';\n      }\n      _this.parent.layoutModule.removeCard(data);\n      _this.parent.layoutModule.renderCardBasedOnIndex(data, position);\n      if (_this.parent.layoutModule.isSelectedCard) {\n        _this.parent.actionModule.SingleCardSelection(data);\n      }\n      if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === 'Index' && _this.parent.sortSettings.direction === 'Descending' && position > 0) {\n        --position;\n      }\n    });\n    args.deletedRecords.forEach(function (data) {\n      _this.parent.layoutModule.removeCard(data);\n    });\n    this.parent.layoutModule.refresh();\n    this.parent.renderTemplates();\n    this.parent.notify(events.contentReady, {});\n    this.parent.trigger(events.dataBound, args, function () {\n      return _this.parent.hideSpinner();\n    });\n  };\n  return Data;\n}();\nexport { Data };","map":{"version":3,"names":["extend","DataManager","Query","Deferred","UrlAdaptor","events","Data","parent","dataState","isPending","resolver","isDataChanged","keyField","cardSettings","headerField","isObservable","initDataManager","dataSource","query","refreshDataManager","prototype","dataManager","kanbanData","getQuery","clone","getData","def","eventPromise","requestType","promise","executeQuery","setState","state","getStateEventArgument","adaptr","dm","url","adaptor","processQuery","data","JSON","parse","pvtData","args","index","_this","dataArgs","deff","undefined","action","editArgs_1","resolve","endEdit","cancelEdit","reject","trigger","dataSourceChanged","then","dataStateChange","addedRecords","forEach","push","changedRecords","changedRecord","cardObj","filter","deletedRecords","deletedRecord","findIndex","splice","catch","hideSpinner","getTable","fromTable","e","dataManagerSuccess","dataManagerFailure","type","offlineArgs","isDestroyed","resultData","result","Array","isArray","modifyArrayData","refreshUI","dataBinding","notify","dataReady","processedData","dataBound","actionFailure","error","updateDataManager","updateType","params","showSpinner","actionArgs","cancel","actionComplete","insert","update","remove","saveChanges","offline","json","onLineData","length","i","position","layoutModule","columnData","getColumnCards","swimlaneSettings","kanbanRows","getRows","swimlaneData","getSwimlaneCards","renderCardBasedOnIndex","removeCard","isSelectedCard","actionModule","SingleCardSelection","sortSettings","field","sortBy","direction","refresh","renderTemplates","contentReady"],"sources":["C:/skyz-web-react-he/node_modules/@syncfusion/ej2-kanban/src/kanban/base/data.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { extend } from '@syncfusion/ej2-base';\nimport { DataManager, Query, Deferred, UrlAdaptor } from '@syncfusion/ej2-data';\nimport * as events from './constant';\n/**\n * Kanban data module\n */\nvar Data = /** @class */ (function () {\n    /**\n     * Constructor for data module\n     *\n     * @param {Kanban} parent Accepts the instance of the Kanban\n     */\n    function Data(parent) {\n        this.dataState = { isPending: false, resolver: null, isDataChanged: false };\n        this.parent = parent;\n        this.keyField = this.parent.cardSettings.headerField;\n        this.dataState = { isDataChanged: false };\n        this.isObservable = false;\n        this.initDataManager(parent.dataSource, parent.query);\n        this.refreshDataManager();\n    }\n    /**\n     * The function used to initialize dataManager` and query\n     *\n     * @param {Object[] | DataManager} dataSource Accepts the dataSource as collection of objects or Datamanager instance.\n     * @param {Query} query Accepts the query to process the data from collections.\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.initDataManager = function (dataSource, query) {\n        this.dataManager = dataSource instanceof DataManager ? dataSource : new DataManager(dataSource);\n        this.query = query instanceof Query ? query : new Query();\n        this.kanbanData = new DataManager(this.parent.kanbanData);\n    };\n    /**\n     * The function used to generate updated Query from schedule model\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getQuery = function () {\n        return this.query.clone();\n    };\n    /**\n     * The function used to get dataSource by executing given Query\n     *\n     * @param  {Query} query - A Query that specifies to generate dataSource\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.getData = function (query) {\n        if (this.parent.dataSource && 'result' in this.parent.dataSource) {\n            var def = this.eventPromise({ requestType: '' }, query);\n            this.isObservable = true;\n            return def.promise;\n        }\n        return this.dataManager.executeQuery(query);\n    };\n    Data.prototype.setState = function (state) {\n        return this.dataState = state;\n    };\n    Data.prototype.getStateEventArgument = function (query) {\n        var adaptr = new UrlAdaptor();\n        var dm = new DataManager({ url: '', adaptor: new UrlAdaptor });\n        var state = adaptr.processQuery(dm, query);\n        var data = JSON.parse(state.data);\n        return extend(data, state.pvtData);\n    };\n    Data.prototype.eventPromise = function (args, query, index) {\n        var _this = this;\n        var dataArgs = args;\n        var state = this.getStateEventArgument(query);\n        var def = new Deferred();\n        var deff = new Deferred();\n        if (args.requestType !== undefined && this.dataState.isDataChanged !== false) {\n            state.action = args;\n            if (args.requestType === 'cardChanged' || args.requestType === 'cardRemoved' || args.requestType === 'cardCreated') {\n                var editArgs_1 = args;\n                editArgs_1.promise = deff.promise;\n                editArgs_1.state = state;\n                editArgs_1.index = index;\n                this.setState({ isPending: true, resolver: deff.resolve });\n                dataArgs.endEdit = deff.resolve;\n                dataArgs.cancelEdit = deff.reject;\n                this.parent.trigger(events.dataSourceChanged, editArgs_1);\n                deff.promise.then(function () {\n                    _this.setState({ isPending: true, resolver: def.resolve });\n                    _this.parent.trigger(events.dataStateChange, state);\n                    editArgs_1.addedRecords.forEach(function (data) {\n                        _this.parent.kanbanData.push(data);\n                    });\n                    editArgs_1.changedRecords.forEach(function (changedRecord) {\n                        var cardObj = _this.parent.kanbanData.filter(function (data) {\n                            return data[_this.parent.cardSettings.headerField] === changedRecord[_this.parent.cardSettings.headerField];\n                        })[0];\n                        extend(cardObj, changedRecord);\n                    });\n                    editArgs_1.deletedRecords.forEach(function (deletedRecord) {\n                        var index = _this.parent.kanbanData.findIndex(function (data) {\n                            return data[_this.parent.cardSettings.headerField] === deletedRecord[_this.parent.cardSettings.headerField];\n                        });\n                        _this.parent.kanbanData.splice(index, 1);\n                    });\n                }).catch(function () { _this.parent.hideSpinner(); void 0; });\n            }\n            else {\n                this.setState({ isPending: true, resolver: def.resolve });\n                this.parent.trigger(events.dataStateChange, state);\n            }\n        }\n        else {\n            this.setState({});\n            def.resolve(this.parent.dataSource);\n        }\n        return def;\n    };\n    /**\n     * The function used to get the table name from the given Query\n     *\n     * @returns {string} Returns the table name.\n     * @private\n     */\n    Data.prototype.getTable = function () {\n        if (this.parent.query) {\n            var query = this.getQuery();\n            return query.fromTable;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * The function is used to send the request and get response from datamanager\n     *\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.refreshDataManager = function () {\n        var _this = this;\n        var dataManager = this.getData(this.getQuery());\n        dataManager.then(function (e) { return _this.dataManagerSuccess(e); }).catch(function (e) { return _this.dataManagerFailure(e); });\n    };\n    /**\n     * The function is used to handle the success response from dataManager\n     *\n     * @param {ReturnType} e Accepts the dataManager success result\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.dataManagerSuccess = function (e, type, offlineArgs, index) {\n        var _this = this;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        if (type) {\n            var resultData = extend([], e.result, null, true);\n            this.parent.kanbanData = resultData;\n            if (offlineArgs.requestType === 'cardCreated') {\n                if (!Array.isArray(e)) {\n                    offlineArgs.addedRecords[0] = extend(offlineArgs.addedRecords[0], e);\n                }\n                else {\n                    this.modifyArrayData(offlineArgs.addedRecords, e);\n                }\n            }\n            else if (offlineArgs.requestType === 'cardChanged') {\n                if (!Array.isArray(e)) {\n                    offlineArgs.changedRecords[0] = extend(offlineArgs.changedRecords[0], e);\n                }\n                else {\n                    this.modifyArrayData(offlineArgs.changedRecords, e);\n                }\n            }\n            else if (offlineArgs.requestType === 'cardRemoved') {\n                if (!Array.isArray(e)) {\n                    offlineArgs.deletedRecords[0] = extend(offlineArgs.deletedRecords[0], e);\n                }\n                else {\n                    this.modifyArrayData(offlineArgs.deletedRecords, e);\n                }\n            }\n            this.refreshUI(offlineArgs, index);\n        }\n        else {\n            this.parent.trigger(events.dataBinding, e, function (args) {\n                var resultData = extend([], args.result, null, true);\n                _this.parent.kanbanData = resultData;\n                _this.parent.notify(events.dataReady, { processedData: resultData });\n                _this.parent.trigger(events.dataBound, null, function () { return _this.parent.hideSpinner(); });\n            });\n        }\n    };\n    /**\n     * The function is used to handle the failure response from dataManager\n     *\n     * @param {ReturnType} e Accepts the dataManager failure result\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.dataManagerFailure = function (e) {\n        var _this = this;\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.trigger(events.actionFailure, { error: e }, function () { return _this.parent.hideSpinner(); });\n    };\n    /**\n     * The function is used to perform the insert, update, delete and batch actions in datamanager\n     *\n     * @param {string} updateType Accepts the update type action\n     * @param {SaveChanges} params Accepts the savechanges params\n     * @param {string} type Accepts the requestType as string\n     * @param {Object} data Accepts the data to perform crud action\n     * @param {number} index Accepts the index to refresh the data into UI\n     * @returns {void}\n     * @private\n     */\n    Data.prototype.updateDataManager = function (updateType, params, type, data, index) {\n        var _this = this;\n        this.parent.showSpinner();\n        var promise;\n        var actionArgs = {\n            requestType: type, cancel: false, addedRecords: params.addedRecords,\n            changedRecords: params.changedRecords, deletedRecords: params.deletedRecords\n        };\n        this.eventPromise(actionArgs, this.query, index);\n        this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {\n            if (!offlineArgs.cancel) {\n                switch (updateType) {\n                    case 'insert':\n                        promise = _this.dataManager.insert(data, _this.getTable(), _this.getQuery());\n                        break;\n                    case 'update':\n                        promise = _this.dataManager.update(_this.keyField, data, _this.getTable(), _this.getQuery());\n                        break;\n                    case 'delete':\n                        promise = _this.dataManager.remove(_this.keyField, data, _this.getTable(), _this.getQuery());\n                        break;\n                    case 'batch':\n                        promise = _this.dataManager.saveChanges(params, _this.keyField, _this.getTable(), _this.getQuery());\n                        break;\n                }\n                if (_this.dataManager.dataSource.offline) {\n                    if (!_this.isObservable) {\n                        _this.kanbanData = _this.dataManager;\n                        _this.parent.kanbanData = _this.dataManager.dataSource.json;\n                        _this.refreshUI(offlineArgs, index);\n                    }\n                }\n                else {\n                    promise.then(function () {\n                        if (_this.parent.isDestroyed) {\n                            return;\n                        }\n                        var dataManager = _this.getData(_this.getQuery());\n                        dataManager.then(function (e) { return _this.dataManagerSuccess(e, 'DataSourceChange', offlineArgs, index); }).catch(function (e) { return _this.dataManagerFailure(e); });\n                    }).catch(function (e) {\n                        _this.dataManagerFailure(e);\n                    });\n                }\n            }\n        });\n    };\n    Data.prototype.modifyArrayData = function (onLineData, e) {\n        if (onLineData.length === e.length) {\n            for (var i = 0; i < e.length; i++) {\n                onLineData[i] = extend(onLineData[i], e[i]);\n            }\n        }\n        return onLineData;\n    };\n    /**\n     * The function is used to refresh the UI once the data manager action is completed\n     *\n     * @param {ActionEventArgs} args Accepts the ActionEventArgs to refresh UI.\n     * @param {number} position Accepts the index to refresh UI.\n     * @returns {void}\n     */\n    Data.prototype.refreshUI = function (args, position) {\n        var _this = this;\n        this.parent.layoutModule.columnData = this.parent.layoutModule.getColumnCards();\n        if (this.parent.swimlaneSettings.keyField) {\n            this.parent.layoutModule.kanbanRows = this.parent.layoutModule.getRows();\n            this.parent.layoutModule.swimlaneData = this.parent.layoutModule.getSwimlaneCards();\n        }\n        args.addedRecords.forEach(function (data, index) {\n            if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n                data[_this.parent.swimlaneSettings.keyField] = '';\n            }\n            _this.parent.layoutModule.renderCardBasedOnIndex(data, position + index);\n        });\n        args.changedRecords.forEach(function (data) {\n            if (_this.parent.swimlaneSettings.keyField && !data[_this.parent.swimlaneSettings.keyField]) {\n                data[_this.parent.swimlaneSettings.keyField] = '';\n            }\n            _this.parent.layoutModule.removeCard(data);\n            _this.parent.layoutModule.renderCardBasedOnIndex(data, position);\n            if (_this.parent.layoutModule.isSelectedCard) {\n                _this.parent.actionModule.SingleCardSelection(data);\n            }\n            if (_this.parent.sortSettings.field && _this.parent.sortSettings.sortBy === 'Index'\n                && _this.parent.sortSettings.direction === 'Descending' && position > 0) {\n                --position;\n            }\n        });\n        args.deletedRecords.forEach(function (data) {\n            _this.parent.layoutModule.removeCard(data);\n        });\n        this.parent.layoutModule.refresh();\n        this.parent.renderTemplates();\n        this.parent.notify(events.contentReady, {});\n        this.parent.trigger(events.dataBound, args, function () { return _this.parent.hideSpinner(); });\n    };\n    return Data;\n}());\nexport { Data };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}