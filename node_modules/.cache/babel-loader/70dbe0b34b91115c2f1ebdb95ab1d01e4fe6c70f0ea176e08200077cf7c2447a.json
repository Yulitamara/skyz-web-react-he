{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\",\n  _s = $RefreshSig$();\n// // Kanban.js\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = ({ data }) => {\n//   const [columnsData, setColumnsData] = useState({\n//     open: [\n//       {\n//         id: \"task-1\",\n//         title: \"Task 1\",\n//         description: \"Description for Task 1\",\n//         assignedTo: \"User A\",\n//         category: \"todo\",\n//       },\n//       {\n//         id: \"task-2\",\n//         title: \"Task 2\",\n//         description: \"Description for Task 2\",\n//         assignedTo: \"User B\",\n//         category: \"inProgress\",\n//       },\n//       {\n//         id: \"task-3\",\n//         title: \"Task 3\",\n//         description: \"Description for Task 3\",\n//         assignedTo: \"User C\",\n//         category: \"done\",\n//       },\n//       // ... other tasks\n//     ],\n//     ongoing: [\n//       // ... tasks for \"Ongoing\" column\n//     ],\n//     close: [\n//       // ... tasks for \"Close\" column\n//     ],\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     const sourceTasks = [...columnsData[source.droppableId]];\n//     const destinationTasks = [...columnsData[destination.droppableId]];\n\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\n\n//     if (!draggedTask) {\n//       console.error(`Task with id ${draggableId} not found in source column.`);\n//       return;\n//     }\n\n//     if (destination.droppableId !== source.droppableId) {\n//       sourceTasks.splice(source.index, 1);\n//       destinationTasks.splice(destination.index, 0, draggedTask);\n\n//       setColumnsData((prevColumnsData) => ({\n//         ...prevColumnsData,\n//         [source.droppableId]: sourceTasks,\n//         [destination.droppableId]: destinationTasks,\n//       }));\n//     } else {\n//       sourceTasks.splice(source.index, 1);\n//       sourceTasks.splice(destination.index, 0, draggedTask);\n\n//       setColumnsData((prevColumnsData) => ({\n//         ...prevColumnsData,\n//         [source.droppableId]: sourceTasks,\n//       }));\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// Kanban.js\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = () => {\n  _s();\n  const [columnsData, setColumnsData] = useState({\n    open: {\n      todo: [{\n        id: \"task-1\",\n        title: \"Task 1\",\n        description: \"Description for Task 1\",\n        assignedTo: \"User A\"\n      }, {\n        id: \"task-2\",\n        title: \"Task 2\",\n        description: \"Description for Task 2\",\n        assignedTo: \"User B\"\n      }\n      // ... other tasks in 'todo'\n      ],\n\n      inProgress: [{\n        id: \"task-3\",\n        title: \"Task 3\",\n        description: \"Description for Task 3\",\n        assignedTo: \"User C\"\n      }\n      // ... other tasks in 'inProgress'\n      ],\n\n      done: [{\n        id: \"task-4\",\n        title: \"Task 4\",\n        description: \"Description for Task 4\",\n        assignedTo: \"User D\"\n      }\n      // ... other tasks in 'done'\n      ]\n    },\n\n    ongoing: {\n      todo: [\n        // ... tasks in 'todo' for 'ongoing'\n      ],\n      inProgress: [\n        // ... tasks in 'inProgress' for 'ongoing'\n      ],\n      done: [\n        // ... tasks in 'done' for 'ongoing'\n      ]\n    },\n    close: {\n      todo: [\n        // ... tasks in 'todo' for 'close'\n      ],\n      inProgress: [\n        // ... tasks in 'inProgress' for 'close'\n      ],\n      done: [\n        // ... tasks in 'done' for 'close'\n      ]\n    }\n  });\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // If there's no destination or the task was dropped back into its original position, do nothing\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Get the task list for the source and destination columns\n    const sourceTasks = [...columnsData[source.droppableId[0]][source.droppableId[1]]];\n    const destinationTasks = [...columnsData[destination.droppableId[0]][destination.droppableId[1]]];\n\n    // Find the task being dragged\n    const draggedTask = sourceTasks.find(task => task.id === draggableId);\n    if (!draggedTask) {\n      console.error(`Task with id ${draggableId} not found in source column.`);\n      return;\n    }\n\n    // Remove the task from the source column\n    sourceTasks.splice(source.index, 1);\n\n    // Insert the task into the destination column at the specified index\n    destinationTasks.splice(destination.index, 0, draggedTask);\n\n    // Update the state with the new task order\n    setColumnsData({\n      ...columnsData,\n      [source.droppableId[0]]: {\n        ...columnsData[source.droppableId[0]],\n        [source.droppableId[1]]: sourceTasks\n      },\n      [destination.droppableId[0]]: {\n        ...columnsData[destination.droppableId[0]],\n        [destination.droppableId[1]]: destinationTasks\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban\",\n      children: [/*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"open\",\n        columnData: columnsData.open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"ongoing\",\n        columnData: columnsData.ongoing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"close\",\n        columnData: columnsData.close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n};\n_s(Kanban, \"vOf8Heym5+DoMRFfNf/bm6ovnVg=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","KanbanColumn","jsxDEV","_jsxDEV","Kanban","_s","columnsData","setColumnsData","open","todo","id","title","description","assignedTo","inProgress","done","ongoing","close","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceTasks","destinationTasks","draggedTask","find","task","console","error","splice","children","className","columnData","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// // Kanban.js\r\n// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = ({ data }) => {\r\n//   const [columnsData, setColumnsData] = useState({\r\n//     open: [\r\n//       {\r\n//         id: \"task-1\",\r\n//         title: \"Task 1\",\r\n//         description: \"Description for Task 1\",\r\n//         assignedTo: \"User A\",\r\n//         category: \"todo\",\r\n//       },\r\n//       {\r\n//         id: \"task-2\",\r\n//         title: \"Task 2\",\r\n//         description: \"Description for Task 2\",\r\n//         assignedTo: \"User B\",\r\n//         category: \"inProgress\",\r\n//       },\r\n//       {\r\n//         id: \"task-3\",\r\n//         title: \"Task 3\",\r\n//         description: \"Description for Task 3\",\r\n//         assignedTo: \"User C\",\r\n//         category: \"done\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     ongoing: [\r\n//       // ... tasks for \"Ongoing\" column\r\n//     ],\r\n//     close: [\r\n//       // ... tasks for \"Close\" column\r\n//     ],\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     const sourceTasks = [...columnsData[source.droppableId]];\r\n//     const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n//     if (!draggedTask) {\r\n//       console.error(`Task with id ${draggableId} not found in source column.`);\r\n//       return;\r\n//     }\r\n\r\n//     if (destination.droppableId !== source.droppableId) {\r\n//       sourceTasks.splice(source.index, 1);\r\n//       destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       setColumnsData((prevColumnsData) => ({\r\n//         ...prevColumnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//         [destination.droppableId]: destinationTasks,\r\n//       }));\r\n//     } else {\r\n//       sourceTasks.splice(source.index, 1);\r\n//       sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       setColumnsData((prevColumnsData) => ({\r\n//         ...prevColumnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//       }));\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n\r\n// Kanban.js\r\nimport React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\nconst Kanban = () => {\r\n  const [columnsData, setColumnsData] = useState({\r\n    open: {\r\n      todo: [\r\n        { id: \"task-1\", title: \"Task 1\", description: \"Description for Task 1\", assignedTo: \"User A\" },\r\n        { id: \"task-2\", title: \"Task 2\", description: \"Description for Task 2\", assignedTo: \"User B\" },\r\n        // ... other tasks in 'todo'\r\n      ],\r\n      inProgress: [\r\n        { id: \"task-3\", title: \"Task 3\", description: \"Description for Task 3\", assignedTo: \"User C\" },\r\n        // ... other tasks in 'inProgress'\r\n      ],\r\n      done: [\r\n        { id: \"task-4\", title: \"Task 4\", description: \"Description for Task 4\", assignedTo: \"User D\" },\r\n        // ... other tasks in 'done'\r\n      ],\r\n    },\r\n    ongoing: {\r\n      todo: [\r\n        // ... tasks in 'todo' for 'ongoing'\r\n      ],\r\n      inProgress: [\r\n        // ... tasks in 'inProgress' for 'ongoing'\r\n      ],\r\n      done: [\r\n        // ... tasks in 'done' for 'ongoing'\r\n      ],\r\n    },\r\n    close: {\r\n      todo: [\r\n        // ... tasks in 'todo' for 'close'\r\n      ],\r\n      inProgress: [\r\n        // ... tasks in 'inProgress' for 'close'\r\n      ],\r\n      done: [\r\n        // ... tasks in 'done' for 'close'\r\n      ],\r\n    },\r\n  });\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    // If there's no destination or the task was dropped back into its original position, do nothing\r\n    if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) {\r\n      return;\r\n    }\r\n\r\n    // Get the task list for the source and destination columns\r\n    const sourceTasks = [...columnsData[source.droppableId[0]][source.droppableId[1]]];\r\n    const destinationTasks = [...columnsData[destination.droppableId[0]][destination.droppableId[1]]];\r\n\r\n    // Find the task being dragged\r\n    const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n    if (!draggedTask) {\r\n      console.error(`Task with id ${draggableId} not found in source column.`);\r\n      return;\r\n    }\r\n\r\n    // Remove the task from the source column\r\n    sourceTasks.splice(source.index, 1);\r\n\r\n    // Insert the task into the destination column at the specified index\r\n    destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n    // Update the state with the new task order\r\n    setColumnsData({\r\n      ...columnsData,\r\n      [source.droppableId[0]]: {\r\n        ...columnsData[source.droppableId[0]],\r\n        [source.droppableId[1]]: sourceTasks,\r\n      },\r\n      [destination.droppableId[0]]: {\r\n        ...columnsData[destination.droppableId[0]],\r\n        [destination.droppableId[1]]: destinationTasks,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"kanban\">\r\n        <KanbanColumn id=\"open\" columnData={columnsData.open} />\r\n        <KanbanColumn id=\"ongoing\" columnData={columnsData.ongoing} />\r\n        <KanbanColumn id=\"close\" columnData={columnsData.close} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}