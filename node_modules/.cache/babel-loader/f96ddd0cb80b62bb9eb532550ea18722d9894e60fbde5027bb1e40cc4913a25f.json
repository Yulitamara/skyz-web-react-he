{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\";\n// // Kanban.js\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [columnsData, setColumnsData] = useState({\n//     open: [\n//       {\n//         id: \"task-1\",\n//         title: \"Task 1\",\n//         description: \"Description for Task 1\",\n//         assignedTo: \"User A\",\n//       },\n//       // ... other tasks\n//     ],\n//     ongoing: [\n//       {\n//         id: \"task-2\",\n//         title: \"Task 2\",\n//         description: \"Description for Task 2\",\n//         assignedTo: \"User B\",\n//       },\n//       // ... other tasks\n//     ],\n//     close: [\n//       {\n//         id: \"task-3\",\n//         title: \"Task 3\",\n//         description: \"Description for Task 3\",\n//         assignedTo: \"User C\",\n//       },\n//       // ... other tasks\n//     ],\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     // If there's no destination or the task was dropped back into its original position, do nothing\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     // Get the task list for the source and destination columns\n//     const sourceTasks = [...columnsData[source.droppableId]];\n//     const destinationTasks = [...columnsData[destination.droppableId]];\n\n//     // Find the task being dragged\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\n\n//     if (!draggedTask) {\n//       console.error(`Task with id ${draggableId} not found in source column.`);\n//       return;\n//     }\n\n//     // If the destination column is different from the source column\n//     if (destination.droppableId !== source.droppableId) {\n//       // Remove the task from the source column\n//       sourceTasks.splice(source.index, 1);\n\n//       // Insert the task into the destination column at the specified index\n//       destinationTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//         [destination.droppableId]: destinationTasks,\n//       });\n//     } else {\n//       // If the destination column is the same as the source column, reordering within the same column\n//       sourceTasks.splice(source.index, 1);\n//       sourceTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order within the same column\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//       });\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// // Kanban.js\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   return (\n//     <div className=\"kanban\">\n//       <KanbanColumn />\n//       <KanbanColumn />\n//       <KanbanColumn />\n//     </div>\n//   );\n// };\n\n// export default Kanban;\n\n// Kanban.js\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [tasks, setTasks] = useState({\n//     columnId: {\n//       title: \"Column 1\",\n//       taskIds: [\"task1\", \"task2\", \"task3\"],\n//     },\n//     columnId2: {\n//       title: \"Column 2\",\n//       taskIds: [\"task4\", \"task5\", \"task6\"],\n//     },\n//     columnId3: {\n//       title: \"Column 3\",\n//       taskIds: [\"task7\", \"task8\", \"task9\"],\n//     },\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     // If there's no destination or the task is dropped in the same position, do nothing\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     // Update the state to reflect the new order of tasks\n//     const newTasks = { ...tasks };\n//     const sourceColumn = newTasks[source.droppableId];\n//     const destinationColumn = newTasks[destination.droppableId];\n\n//     sourceColumn.taskIds.splice(source.index, 1);\n//     destinationColumn.taskIds.splice(destination.index, 0, draggableId);\n\n//     setTasks(newTasks);\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn columnId=\"columnId\" tasks={tasks} />\n//         <KanbanColumn columnId=\"columnId2\" tasks={tasks} />\n//         <KanbanColumn columnId=\"columnId3\" tasks={tasks} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// Kanban.js\nimport React from \"react\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumnContainer from \"./KanbanColumnContainer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = () => {\n  // Your tasks data here\n  const tasks = {\n    columnId1: {\n      title: \"Column 1\",\n      taskIds: [\"task1\", \"task2\", \"task3\"]\n    },\n    columnId2: {\n      title: \"Column 2\",\n      taskIds: [\"task4\", \"task5\", \"task6\"]\n    },\n    columnId3: {\n      title: \"Column 3\",\n      taskIds: [\"task7\", \"task8\", \"task9\"]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kanban\",\n    children: [/*#__PURE__*/_jsxDEV(KanbanColumnContainer, {\n      containerTitle: \"Container 1\",\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(KanbanColumnContainer, {\n      containerTitle: \"Container 2\",\n      tasks: tasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","KanbanColumnContainer","jsxDEV","_jsxDEV","Kanban","tasks","columnId1","title","taskIds","columnId2","columnId3","className","children","containerTitle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// // Kanban.js\r\n// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [columnsData, setColumnsData] = useState({\r\n//     open: [\r\n//       {\r\n//         id: \"task-1\",\r\n//         title: \"Task 1\",\r\n//         description: \"Description for Task 1\",\r\n//         assignedTo: \"User A\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     ongoing: [\r\n//       {\r\n//         id: \"task-2\",\r\n//         title: \"Task 2\",\r\n//         description: \"Description for Task 2\",\r\n//         assignedTo: \"User B\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     close: [\r\n//       {\r\n//         id: \"task-3\",\r\n//         title: \"Task 3\",\r\n//         description: \"Description for Task 3\",\r\n//         assignedTo: \"User C\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     // If there's no destination or the task was dropped back into its original position, do nothing\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     // Get the task list for the source and destination columns\r\n//     const sourceTasks = [...columnsData[source.droppableId]];\r\n//     const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n//     // Find the task being dragged\r\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n//     if (!draggedTask) {\r\n//       console.error(`Task with id ${draggableId} not found in source column.`);\r\n//       return;\r\n//     }\r\n\r\n//     // If the destination column is different from the source column\r\n//     if (destination.droppableId !== source.droppableId) {\r\n//       // Remove the task from the source column\r\n//       sourceTasks.splice(source.index, 1);\r\n\r\n//       // Insert the task into the destination column at the specified index\r\n//       destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//         [destination.droppableId]: destinationTasks,\r\n//       });\r\n//     } else {\r\n//       // If the destination column is the same as the source column, reordering within the same column\r\n//       sourceTasks.splice(source.index, 1);\r\n//       sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order within the same column\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// // Kanban.js\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   return (\r\n//     <div className=\"kanban\">\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// Kanban.js\r\n// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [tasks, setTasks] = useState({\r\n//     columnId: {\r\n//       title: \"Column 1\",\r\n//       taskIds: [\"task1\", \"task2\", \"task3\"],\r\n//     },\r\n//     columnId2: {\r\n//       title: \"Column 2\",\r\n//       taskIds: [\"task4\", \"task5\", \"task6\"],\r\n//     },\r\n//     columnId3: {\r\n//       title: \"Column 3\",\r\n//       taskIds: [\"task7\", \"task8\", \"task9\"],\r\n//     },\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     // If there's no destination or the task is dropped in the same position, do nothing\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     // Update the state to reflect the new order of tasks\r\n//     const newTasks = { ...tasks };\r\n//     const sourceColumn = newTasks[source.droppableId];\r\n//     const destinationColumn = newTasks[destination.droppableId];\r\n\r\n//     sourceColumn.taskIds.splice(source.index, 1);\r\n//     destinationColumn.taskIds.splice(destination.index, 0, draggableId);\r\n\r\n//     setTasks(newTasks);\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn columnId=\"columnId\" tasks={tasks} />\r\n//         <KanbanColumn columnId=\"columnId2\" tasks={tasks} />\r\n//         <KanbanColumn columnId=\"columnId3\" tasks={tasks} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// Kanban.js\r\nimport React from \"react\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumnContainer from \"./KanbanColumnContainer\";\r\n\r\nconst Kanban = () => {\r\n  // Your tasks data here\r\n  const tasks = {\r\n    columnId1: { title: \"Column 1\", taskIds: [\"task1\", \"task2\", \"task3\"] },\r\n    columnId2: { title: \"Column 2\", taskIds: [\"task4\", \"task5\", \"task6\"] },\r\n    columnId3: { title: \"Column 3\", taskIds: [\"task7\", \"task8\", \"task9\"] },\r\n  };\r\n\r\n  return (\r\n    <div className=\"kanban\">\r\n      <KanbanColumnContainer containerTitle=\"Container 1\" tasks={tasks} />\r\n      <KanbanColumnContainer containerTitle=\"Container 2\" tasks={tasks} />\r\n      {/* Add more KanbanColumnContainer components as needed */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,6BAA6B;AACpC,OAAOC,qBAAqB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB;EACA,MAAMC,KAAK,GAAG;IACZC,SAAS,EAAE;MAAEC,KAAK,EAAE,UAAU;MAAEC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;IAAE,CAAC;IACtEC,SAAS,EAAE;MAAEF,KAAK,EAAE,UAAU;MAAEC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;IAAE,CAAC;IACtEE,SAAS,EAAE;MAAEH,KAAK,EAAE,UAAU;MAAEC,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;IAAE;EACvE,CAAC;EAED,oBACEL,OAAA;IAAKQ,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBT,OAAA,CAACF,qBAAqB;MAACY,cAAc,EAAC,aAAa;MAACR,KAAK,EAAEA;IAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpEd,OAAA,CAACF,qBAAqB;MAACY,cAAc,EAAC,aAAa;MAACR,KAAK,EAAEA;IAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjE,CAAC;AAEV,CAAC;AAACC,EAAA,GAfId,MAAM;AAiBZ,eAAeA,MAAM;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}