{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\",\n  _s = $RefreshSig$();\n// // Kanban.js\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [columnsData, setColumnsData] = useState({\n//     open: [\n//       {\n//         id: \"task-1\",\n//         title: \"Task 1\",\n//         description: \"Description for Task 1\",\n//         assignedTo: \"User A\",\n//       },\n//       // ... other tasks\n//     ],\n//     ongoing: [\n//       {\n//         id: \"task-2\",\n//         title: \"Task 2\",\n//         description: \"Description for Task 2\",\n//         assignedTo: \"User B\",\n//       },\n//       // ... other tasks\n//     ],\n//     close: [\n//       {\n//         id: \"task-3\",\n//         title: \"Task 3\",\n//         description: \"Description for Task 3\",\n//         assignedTo: \"User C\",\n//       },\n//       // ... other tasks\n//     ],\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     // If there's no destination or the task was dropped back into its original position, do nothing\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     // Get the task list for the source and destination columns\n//     const sourceTasks = [...columnsData[source.droppableId]];\n//     const destinationTasks = [...columnsData[destination.droppableId]];\n\n//     // Find the task being dragged\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\n\n//     if (!draggedTask) {\n//       console.error(`Task with id ${draggableId} not found in source column.`);\n//       return;\n//     }\n\n//     // If the destination column is different from the source column\n//     if (destination.droppableId !== source.droppableId) {\n//       // Remove the task from the source column\n//       sourceTasks.splice(source.index, 1);\n\n//       // Insert the task into the destination column at the specified index\n//       destinationTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//         [destination.droppableId]: destinationTasks,\n//       });\n//     } else {\n//       // If the destination column is the same as the source column, reordering within the same column\n//       sourceTasks.splice(source.index, 1);\n//       sourceTasks.splice(destination.index, 0, draggedTask);\n\n//       // Update the state with the new task order within the same column\n//       setColumnsData({\n//         ...columnsData,\n//         [source.droppableId]: sourceTasks,\n//       });\n//     }\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\n// // Kanban.js\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   return (\n//     <div className=\"kanban\">\n//       <KanbanColumn />\n//       <KanbanColumn />\n//       <KanbanColumn />\n//     </div>\n//   );\n// };\n\n// export default Kanban;\n\n// Kanban.js\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = () => {\n  _s();\n  const [kanbanData, setKanbanData] = useState({\n    columns: {\n      \"column-1\": {\n        id: \"column-1\",\n        title: \"To Do\",\n        taskIds: [\"task-1\", \"task-2\", \"task-3\"]\n      },\n      \"column-2\": {\n        id: \"column-2\",\n        title: \"In Progress\",\n        taskIds: []\n      },\n      \"column-3\": {\n        id: \"column-3\",\n        title: \"Done\",\n        taskIds: []\n      }\n    },\n    tasks: {\n      \"task-1\": {\n        id: \"task-1\",\n        content: \"Task 1\"\n      },\n      \"task-2\": {\n        id: \"task-2\",\n        content: \"Task 2\"\n      },\n      \"task-3\": {\n        id: \"task-3\",\n        content: \"Task 3\"\n      }\n    },\n    columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n  });\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // Check if there is no valid destination\n    if (!destination) {\n      return;\n    }\n\n    // Check if the task was dropped in a different location\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Update the state based on the drag and drop result\n    const newColumnOrder = [...kanbanData.columnOrder];\n    newColumnOrder.splice(source.index, 1);\n    newColumnOrder.splice(destination.index, 0, source.droppableId);\n    const newColumns = {\n      ...kanbanData.columns,\n      [source.droppableId]: {\n        ...kanbanData.columns[source.droppableId],\n        taskIds: [...kanbanData.columns[source.droppableId].taskIds]\n      },\n      [destination.droppableId]: {\n        ...kanbanData.columns[destination.droppableId],\n        taskIds: [...kanbanData.columns[destination.droppableId].taskIds, draggableId]\n      }\n    };\n    setKanbanData({\n      ...kanbanData,\n      columns: newColumns,\n      columnOrder: newColumnOrder\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban\",\n      children: kanbanData.columnOrder.map(columnId => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        column: kanbanData.columns[columnId],\n        tasks: kanbanData.tasks\n      }, columnId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(Kanban, \"Y/2Mi5BjprWNwDewrWLZ7QmXCfY=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","KanbanColumn","jsxDEV","_jsxDEV","Kanban","_s","kanbanData","setKanbanData","columns","id","title","taskIds","tasks","content","columnOrder","onDragEnd","result","destination","source","draggableId","droppableId","index","newColumnOrder","splice","newColumns","children","className","map","columnId","column","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// // Kanban.js\r\n// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [columnsData, setColumnsData] = useState({\r\n//     open: [\r\n//       {\r\n//         id: \"task-1\",\r\n//         title: \"Task 1\",\r\n//         description: \"Description for Task 1\",\r\n//         assignedTo: \"User A\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     ongoing: [\r\n//       {\r\n//         id: \"task-2\",\r\n//         title: \"Task 2\",\r\n//         description: \"Description for Task 2\",\r\n//         assignedTo: \"User B\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//     close: [\r\n//       {\r\n//         id: \"task-3\",\r\n//         title: \"Task 3\",\r\n//         description: \"Description for Task 3\",\r\n//         assignedTo: \"User C\",\r\n//       },\r\n//       // ... other tasks\r\n//     ],\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     // If there's no destination or the task was dropped back into its original position, do nothing\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     // Get the task list for the source and destination columns\r\n//     const sourceTasks = [...columnsData[source.droppableId]];\r\n//     const destinationTasks = [...columnsData[destination.droppableId]];\r\n\r\n//     // Find the task being dragged\r\n//     const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n//     if (!draggedTask) {\r\n//       console.error(`Task with id ${draggableId} not found in source column.`);\r\n//       return;\r\n//     }\r\n\r\n//     // If the destination column is different from the source column\r\n//     if (destination.droppableId !== source.droppableId) {\r\n//       // Remove the task from the source column\r\n//       sourceTasks.splice(source.index, 1);\r\n\r\n//       // Insert the task into the destination column at the specified index\r\n//       destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//         [destination.droppableId]: destinationTasks,\r\n//       });\r\n//     } else {\r\n//       // If the destination column is the same as the source column, reordering within the same column\r\n//       sourceTasks.splice(source.index, 1);\r\n//       sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n//       // Update the state with the new task order within the same column\r\n//       setColumnsData({\r\n//         ...columnsData,\r\n//         [source.droppableId]: sourceTasks,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n//         <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n//         <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// // Kanban.js\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   return (\r\n//     <div className=\"kanban\">\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//       <KanbanColumn />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\n// Kanban.js\r\nimport React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\nconst Kanban = () => {\r\nconst [kanbanData, setKanbanData] = useState({\r\n  columns: {\r\n    \"column-1\": {\r\n      id: \"column-1\",\r\n      title: \"To Do\",\r\n      taskIds: [\"task-1\", \"task-2\", \"task-3\"],\r\n    },\r\n    \"column-2\": {\r\n      id: \"column-2\",\r\n      title: \"In Progress\",\r\n      taskIds: [],\r\n    },\r\n    \"column-3\": {\r\n      id: \"column-3\",\r\n      title: \"Done\",\r\n      taskIds: [],\r\n    },\r\n  },\r\n  tasks: {\r\n    \"task-1\": { id: \"task-1\", content: \"Task 1\" },\r\n    \"task-2\": { id: \"task-2\", content: \"Task 2\" },\r\n    \"task-3\": { id: \"task-3\", content: \"Task 3\" },\r\n  },\r\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\r\n});\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    // Check if there is no valid destination\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    // Check if the task was dropped in a different location\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Update the state based on the drag and drop result\r\n    const newColumnOrder = [...kanbanData.columnOrder];\r\n    newColumnOrder.splice(source.index, 1);\r\n    newColumnOrder.splice(destination.index, 0, source.droppableId);\r\n\r\n    const newColumns = {\r\n      ...kanbanData.columns,\r\n      [source.droppableId]: {\r\n        ...kanbanData.columns[source.droppableId],\r\n        taskIds: [...kanbanData.columns[source.droppableId].taskIds],\r\n      },\r\n      [destination.droppableId]: {\r\n        ...kanbanData.columns[destination.droppableId],\r\n        taskIds: [\r\n          ...kanbanData.columns[destination.droppableId].taskIds,\r\n          draggableId,\r\n        ],\r\n      },\r\n    };\r\n\r\n    setKanbanData({\r\n      ...kanbanData,\r\n      columns: newColumns,\r\n      columnOrder: newColumnOrder,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"kanban\">\r\n        {kanbanData.columnOrder.map((columnId) => (\r\n          <KanbanColumn\r\n            key={columnId}\r\n            column={kanbanData.columns[columnId]}\r\n            tasks={kanbanData.tasks}\r\n          />\r\n        ))}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}