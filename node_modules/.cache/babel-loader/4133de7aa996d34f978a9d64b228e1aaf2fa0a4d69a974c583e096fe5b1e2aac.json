{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// import \"../assets/scss/_kanban.scss\";\n// import KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = () => {\n//   const [tasks, setTasks] = useState({\n//     columnId: {\n//       title: \"Column 1\",\n//       taskIds: [\"task1\", \"task2\", \"task3\"],\n//     },\n//     columnId2: {\n//       title: \"Column 2\",\n//       taskIds: [\"task4\", \"task5\", \"task6\"],\n//     },\n//     columnId3: {\n//       title: \"Column 3\",\n//       taskIds: [\"task7\", \"task8\", \"task9\"],\n//     },\n//   });\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     const newTasks = { ...tasks };\n//     const sourceColumn = newTasks[source.droppableId];\n//     const destinationColumn = newTasks[destination.droppableId];\n\n//     sourceColumn.taskIds.splice(source.index, 1);\n//     destinationColumn.taskIds.splice(destination.index, 0, draggableId);\n\n//     setTasks(newTasks);\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"kanban\">\n//         <KanbanColumn columnId=\"columnId\" tasks={tasks} />\n//         <KanbanColumn columnId=\"columnId2\" tasks={tasks} />\n//         <KanbanColumn columnId=\"columnId3\" tasks={tasks} />\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = () => {\n  _s();\n  const initialData = {\n    open: {\n      a: [],\n      b: [],\n      c: []\n    },\n    ongoing: {\n      d: [],\n      e: [],\n      f: []\n    },\n    close: {\n      g: [],\n      h: [],\n      i: []\n    }\n  };\n  const [tasks, setTasks] = useState(initialData);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // Check if there is no destination or if the destination is the same as the source\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Find the task that was dragged\n    const draggedTask = tasks[source.droppableId][source.index];\n\n    // Remove the task from the source\n    const newSourceTasks = Array.from(tasks[source.droppableId]);\n    newSourceTasks.splice(source.index, 1);\n\n    // Add the task to the destination\n    const newDestinationTasks = Array.from(tasks[destination.droppableId]);\n    newDestinationTasks.splice(destination.index, 0, draggedTask);\n\n    // Update the state with the new task order\n    setTasks(prevTasks => ({\n      ...prevTasks,\n      [source.droppableId]: newSourceTasks,\n      [destination.droppableId]: newDestinationTasks\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: [/*#__PURE__*/_jsxDEV(KanbanColumn, {\n        title: \"Open\",\n        tasks: tasks.open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        title: \"Ongoing\",\n        tasks: tasks.ongoing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        title: \"Close\",\n        tasks: tasks.close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(Kanban, \"GUB0CuPME9SymmVRPfbaA18jjHU=\");\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","KanbanColumn","jsxDEV","_jsxDEV","Kanban","_s","initialData","open","a","b","c","ongoing","d","e","f","close","g","h","i","tasks","setTasks","onDragEnd","result","destination","source","draggableId","droppableId","index","draggedTask","newSourceTasks","Array","from","splice","newDestinationTasks","prevTasks","children","className","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { DragDropContext } from \"react-beautiful-dnd\";\r\n// import \"../assets/scss/_kanban.scss\";\r\n// import KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = () => {\r\n//   const [tasks, setTasks] = useState({\r\n//     columnId: {\r\n//       title: \"Column 1\",\r\n//       taskIds: [\"task1\", \"task2\", \"task3\"],\r\n//     },\r\n//     columnId2: {\r\n//       title: \"Column 2\",\r\n//       taskIds: [\"task4\", \"task5\", \"task6\"],\r\n//     },\r\n//     columnId3: {\r\n//       title: \"Column 3\",\r\n//       taskIds: [\"task7\", \"task8\", \"task9\"],\r\n//     },\r\n//   });\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     const newTasks = { ...tasks };\r\n//     const sourceColumn = newTasks[source.droppableId];\r\n//     const destinationColumn = newTasks[destination.droppableId];\r\n\r\n//     sourceColumn.taskIds.splice(source.index, 1);\r\n//     destinationColumn.taskIds.splice(destination.index, 0, draggableId);\r\n\r\n//     setTasks(newTasks);\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className=\"kanban\">\r\n//         <KanbanColumn columnId=\"columnId\" tasks={tasks} />\r\n//         <KanbanColumn columnId=\"columnId2\" tasks={tasks} />\r\n//         <KanbanColumn columnId=\"columnId3\" tasks={tasks} />\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\nimport React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\nconst Kanban = () => {\r\n  const initialData = {\r\n    open: {\r\n      a: [],\r\n      b: [],\r\n      c: [],\r\n    },\r\n    ongoing: {\r\n      d: [],\r\n      e: [],\r\n      f: [],\r\n    },\r\n    close: {\r\n      g: [],\r\n      h: [],\r\n      i: [],\r\n    },\r\n  };\r\n\r\n  const [tasks, setTasks] = useState(initialData);\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    // Check if there is no destination or if the destination is the same as the source\r\n    if (\r\n      !destination ||\r\n      (destination.droppableId === source.droppableId &&\r\n        destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Find the task that was dragged\r\n    const draggedTask = tasks[source.droppableId][source.index];\r\n\r\n    // Remove the task from the source\r\n    const newSourceTasks = Array.from(tasks[source.droppableId]);\r\n    newSourceTasks.splice(source.index, 1);\r\n\r\n    // Add the task to the destination\r\n    const newDestinationTasks = Array.from(tasks[destination.droppableId]);\r\n    newDestinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n    // Update the state with the new task order\r\n    setTasks((prevTasks) => ({\r\n      ...prevTasks,\r\n      [source.droppableId]: newSourceTasks,\r\n      [destination.droppableId]: newDestinationTasks,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"kanban-board\">\r\n        <KanbanColumn title=\"Open\" tasks={tasks.open} />\r\n        <KanbanColumn title=\"Ongoing\" tasks={tasks.ongoing} />\r\n        <KanbanColumn title=\"Close\" tasks={tasks.close} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}