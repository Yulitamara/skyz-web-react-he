{"ast":null,"code":"var _jsxFileName = \"C:\\\\skyz-web-react-he\\\\src\\\\components\\\\Kanban.js\";\n// Kanban.js\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumn from \"./KanbanColumn\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Kanban = _ref => {\n  let {\n    data\n  } = _ref;\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // If there's no destination or the task was dropped back into its original position, do nothing\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    // Get the task list for the source and destination columns\n    const sourceTasks = columnsData[source.droppableId];\n    const destinationTasks = columnsData[destination.droppableId];\n\n    // Check if sourceTasks and destinationTasks are arrays\n    if (!Array.isArray(sourceTasks) || !Array.isArray(destinationTasks)) {\n      console.error(`Invalid column data for source or destination.`);\n      return;\n    }\n\n    // Find the task being dragged\n    const draggedTask = sourceTasks.find(task => task.id === draggableId);\n    if (!draggedTask) {\n      console.error(`Task with id ${draggableId} not found in source column.`);\n      return;\n    }\n\n    // If the destination column is different from the source column\n    if (destination.droppableId !== source.droppableId) {\n      // Remove the task from the source column\n      sourceTasks.splice(source.index, 1);\n\n      // Insert the task into the destination column at the specified index\n      destinationTasks.splice(destination.index, 0, draggedTask);\n\n      // Update the state with the new task order\n      setColumnsData({\n        ...columnsData,\n        [source.droppableId]: [...sourceTasks],\n        [destination.droppableId]: [...destinationTasks]\n      });\n    } else {\n      // If the destination column is the same as the source column, reordering within the same column\n      sourceTasks.splice(source.index, 1);\n      sourceTasks.splice(destination.index, 0, draggedTask);\n\n      // Update the state with the new task order within the same column\n      setColumnsData({\n        ...columnsData,\n        [source.droppableId]: [...sourceTasks]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban\",\n      children: [/*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"open\",\n        tasks: columnsData.open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"ongoing\",\n        tasks: columnsData.ongoing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: \"close\",\n        tasks: columnsData.close\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c = Kanban;\nexport default Kanban;\nvar _c;\n$RefreshReg$(_c, \"Kanban\");","map":{"version":3,"names":["React","useState","DragDropContext","KanbanColumn","jsxDEV","_jsxDEV","Kanban","_ref","data","onDragEnd","result","destination","source","draggableId","droppableId","index","sourceTasks","columnsData","destinationTasks","Array","isArray","console","error","draggedTask","find","task","id","splice","setColumnsData","children","className","tasks","open","fileName","_jsxFileName","lineNumber","columnNumber","ongoing","close","_c","$RefreshReg$"],"sources":["C:/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["// Kanban.js\r\nimport React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\nconst Kanban = ({ data }) => {\r\n\r\n  const onDragEnd = (result) => {\r\n    const { destination, source, draggableId } = result;\r\n\r\n    // If there's no destination or the task was dropped back into its original position, do nothing\r\n    if (\r\n      !destination ||\r\n      (destination.droppableId === source.droppableId &&\r\n        destination.index === source.index)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Get the task list for the source and destination columns\r\n    const sourceTasks = columnsData[source.droppableId];\r\n    const destinationTasks = columnsData[destination.droppableId];\r\n\r\n    // Check if sourceTasks and destinationTasks are arrays\r\n    if (!Array.isArray(sourceTasks) || !Array.isArray(destinationTasks)) {\r\n      console.error(`Invalid column data for source or destination.`);\r\n      return;\r\n    }\r\n\r\n    // Find the task being dragged\r\n    const draggedTask = sourceTasks.find((task) => task.id === draggableId);\r\n\r\n    if (!draggedTask) {\r\n      console.error(`Task with id ${draggableId} not found in source column.`);\r\n      return;\r\n    }\r\n\r\n    // If the destination column is different from the source column\r\n    if (destination.droppableId !== source.droppableId) {\r\n      // Remove the task from the source column\r\n      sourceTasks.splice(source.index, 1);\r\n\r\n      // Insert the task into the destination column at the specified index\r\n      destinationTasks.splice(destination.index, 0, draggedTask);\r\n\r\n      // Update the state with the new task order\r\n      setColumnsData({\r\n        ...columnsData,\r\n        [source.droppableId]: [...sourceTasks],\r\n        [destination.droppableId]: [...destinationTasks],\r\n      });\r\n    } else {\r\n      // If the destination column is the same as the source column, reordering within the same column\r\n      sourceTasks.splice(source.index, 1);\r\n      sourceTasks.splice(destination.index, 0, draggedTask);\r\n\r\n      // Update the state with the new task order within the same column\r\n      setColumnsData({\r\n        ...columnsData,\r\n        [source.droppableId]: [...sourceTasks],\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <div className=\"kanban\">\r\n        <KanbanColumn id=\"open\" tasks={columnsData.open} />\r\n        <KanbanColumn id=\"ongoing\" tasks={columnsData.ongoing} />\r\n        <KanbanColumn id=\"close\" tasks={columnsData.close} />\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Kanban;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}