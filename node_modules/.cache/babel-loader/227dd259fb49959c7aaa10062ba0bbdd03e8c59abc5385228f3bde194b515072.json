{"ast":null,"code":"import React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport \"../assets/scss/_kanban.scss\";\nimport KanbanColumn from \"./KanbanColumn\";\n\n// const Kanban = ({ initialData, mainTitleClass }) => {\n//   const [tasks, setTasks] = useState(initialData);\n//   const [isMinimized, setIsMinimized] = useState(false);\n\n//   const onDragEnd = (result) => {\n//     const { destination, source, draggableId } = result;\n\n//     if (\n//       !destination ||\n//       (destination.droppableId === source.droppableId &&\n//         destination.index === source.index)\n//     ) {\n//       return;\n//     }\n\n//     const newTasks = { ...tasks };\n//     const sourceColumn = newTasks.columns[source.droppableId];\n//     const destinationColumn = newTasks.columns[destination.droppableId];\n\n//     sourceColumn.taskIds.splice(source.index, 1);\n//     destinationColumn.taskIds.splice(destination.index, 0, draggableId);\n\n//     setTasks(newTasks);\n//   };\n\n//   const mainTitle = tasks.columns.columnId\n//     ? tasks.columns.columnId.title\n//     : \"Default Title\";\n\n//   const handleToggleMinimize = () => {\n//     setIsMinimized((prev) => !prev);\n//   };\n\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className={`kanban ${isMinimized ? \"minimize\" : \"\"}`}>\n//         <div\n//           className={`main-title ${mainTitleClass}`}\n//           onClick={handleToggleMinimize}\n//         >\n//           <span></span>\n//           <h2>{mainTitle}</h2>\n//           <span className=\"material-symbols-outlined close-btn\">\n//             {isMinimized ? \"expand_content\" : \"close\"}\n//           </span>\n//         </div>\n//         <div className=\"columns-container\">\n//           {Object.keys(tasks.columns).map((columnId) => (\n//             <KanbanColumn\n//               key={columnId}\n//               columnId={columnId}\n//               tasks={tasks}\n//               subtitle={tasks.columns[columnId].subtitle}\n//               titleClassName={`title-${columnId}`}\n//             />\n//           ))}\n//         </div>\n//       </div>\n//     </DragDropContext>\n//   );\n// };\n\n// export default Kanban;\n\nconst initialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content: \"משימה 1\"\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"משימה 2\"\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"משימה 3\"\n    }\n  },\n  columns: {\n    open: {\n      id: \"open\",\n      title: \"פתוח\",\n      taskIds: [\"task-1\"]\n    },\n    inProgress: {\n      id: \"inProgress\",\n      title: \"בתהליך\",\n      taskIds: [\"task-2\"]\n    },\n    closed: {\n      id: \"closed\",\n      title: \"סגור\",\n      taskIds: [\"task-3\"]\n    }\n  }\n};\nconst onDragEnd = result => {\n  const {\n    destination,\n    source,\n    draggableId\n  } = result;\n  if (!destination) return;\n  if (destination.droppableId === source.droppableId && destination.index === source.index) {\n    return;\n  }\n  const startColumn = tasks.columns[source.droppableId];\n  const finishColumn = tasks.columns[destination.droppableId];\n  if (startColumn === finishColumn) {\n    const newTaskIds = Array.from(startColumn.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = {\n      ...startColumn,\n      taskIds: newTaskIds\n    };\n    setTasks({\n      ...tasks,\n      columns: {\n        ...tasks.columns,\n        [newColumn.id]: newColumn\n      }\n    });\n    return;\n  }\n\n  // Move task to another column\n  const startTaskIds = Array.from(startColumn.taskIds);\n  startTaskIds.splice(source.index, 1);\n  const newStart = {\n    ...startColumn,\n    taskIds: startTaskIds\n  };\n  const finishTaskIds = Array.from(finishColumn.taskIds);\n  finishTaskIds.splice(destination.index, 0, draggableId);\n  const newFinish = {\n    ...finishColumn,\n    taskIds: finishTaskIds\n  };\n  setTasks({\n    ...tasks,\n    columns: {\n      ...tasks.columns,\n      [newStart.id]: newStart,\n      [newFinish.id]: newFinish\n    }\n  });\n};","map":{"version":3,"names":["React","useState","DragDropContext","KanbanColumn","initialData","tasks","id","content","columns","open","title","taskIds","inProgress","closed","onDragEnd","result","destination","source","draggableId","droppableId","index","startColumn","finishColumn","newTaskIds","Array","from","splice","newColumn","setTasks","startTaskIds","newStart","finishTaskIds","newFinish"],"sources":["C:/Users/yulit/skyz-web-react-he/src/components/Kanban.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport \"../assets/scss/_kanban.scss\";\r\nimport KanbanColumn from \"./KanbanColumn\";\r\n\r\n// const Kanban = ({ initialData, mainTitleClass }) => {\r\n//   const [tasks, setTasks] = useState(initialData);\r\n//   const [isMinimized, setIsMinimized] = useState(false);\r\n\r\n//   const onDragEnd = (result) => {\r\n//     const { destination, source, draggableId } = result;\r\n\r\n//     if (\r\n//       !destination ||\r\n//       (destination.droppableId === source.droppableId &&\r\n//         destination.index === source.index)\r\n//     ) {\r\n//       return;\r\n//     }\r\n\r\n//     const newTasks = { ...tasks };\r\n//     const sourceColumn = newTasks.columns[source.droppableId];\r\n//     const destinationColumn = newTasks.columns[destination.droppableId];\r\n\r\n//     sourceColumn.taskIds.splice(source.index, 1);\r\n//     destinationColumn.taskIds.splice(destination.index, 0, draggableId);\r\n\r\n//     setTasks(newTasks);\r\n//   };\r\n\r\n//   const mainTitle = tasks.columns.columnId\r\n//     ? tasks.columns.columnId.title\r\n//     : \"Default Title\";\r\n\r\n//   const handleToggleMinimize = () => {\r\n//     setIsMinimized((prev) => !prev);\r\n//   };\r\n\r\n//   return (\r\n//     <DragDropContext onDragEnd={onDragEnd}>\r\n//       <div className={`kanban ${isMinimized ? \"minimize\" : \"\"}`}>\r\n//         <div\r\n//           className={`main-title ${mainTitleClass}`}\r\n//           onClick={handleToggleMinimize}\r\n//         >\r\n//           <span></span>\r\n//           <h2>{mainTitle}</h2>\r\n//           <span className=\"material-symbols-outlined close-btn\">\r\n//             {isMinimized ? \"expand_content\" : \"close\"}\r\n//           </span>\r\n//         </div>\r\n//         <div className=\"columns-container\">\r\n//           {Object.keys(tasks.columns).map((columnId) => (\r\n//             <KanbanColumn\r\n//               key={columnId}\r\n//               columnId={columnId}\r\n//               tasks={tasks}\r\n//               subtitle={tasks.columns[columnId].subtitle}\r\n//               titleClassName={`title-${columnId}`}\r\n//             />\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//     </DragDropContext>\r\n//   );\r\n// };\r\n\r\n// export default Kanban;\r\n\r\nconst initialData = {\r\n  tasks: {\r\n    \"task-1\": { id: \"task-1\", content: \"משימה 1\" },\r\n    \"task-2\": { id: \"task-2\", content: \"משימה 2\" },\r\n    \"task-3\": { id: \"task-3\", content: \"משימה 3\" },\r\n  },\r\n  columns: {\r\n    open: {\r\n      id: \"open\",\r\n      title: \"פתוח\",\r\n      taskIds: [\"task-1\"],\r\n    },\r\n    inProgress: {\r\n      id: \"inProgress\",\r\n      title: \"בתהליך\",\r\n      taskIds: [\"task-2\"],\r\n    },\r\n    closed: {\r\n      id: \"closed\",\r\n      title: \"סגור\",\r\n      taskIds: [\"task-3\"],\r\n    },\r\n  },\r\n};\r\nconst onDragEnd = (result) => {\r\n  const { destination, source, draggableId } = result;\r\n\r\n  if (!destination) return;\r\n\r\n  if (\r\n    destination.droppableId === source.droppableId &&\r\n    destination.index === source.index\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const startColumn = tasks.columns[source.droppableId];\r\n  const finishColumn = tasks.columns[destination.droppableId];\r\n\r\n  if (startColumn === finishColumn) {\r\n    const newTaskIds = Array.from(startColumn.taskIds);\r\n    newTaskIds.splice(source.index, 1);\r\n    newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n    const newColumn = {\r\n      ...startColumn,\r\n      taskIds: newTaskIds,\r\n    };\r\n\r\n    setTasks({\r\n      ...tasks,\r\n      columns: {\r\n        ...tasks.columns,\r\n        [newColumn.id]: newColumn,\r\n      },\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Move task to another column\r\n  const startTaskIds = Array.from(startColumn.taskIds);\r\n  startTaskIds.splice(source.index, 1);\r\n  const newStart = {\r\n    ...startColumn,\r\n    taskIds: startTaskIds,\r\n  };\r\n\r\n  const finishTaskIds = Array.from(finishColumn.taskIds);\r\n  finishTaskIds.splice(destination.index, 0, draggableId);\r\n  const newFinish = {\r\n    ...finishColumn,\r\n    taskIds: finishTaskIds,\r\n  };\r\n\r\n  setTasks({\r\n    ...tasks,\r\n    columns: {\r\n      ...tasks.columns,\r\n      [newStart.id]: newStart,\r\n      [newFinish.id]: newFinish,\r\n    },\r\n  });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}